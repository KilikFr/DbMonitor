<?php

namespace Kilik\DbMonitorBundle\Repository;

use Kilik\DbMonitorBundle\Entity\AbstractHistory;

/**
 * HistoryRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AbstractHistoryRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get max Date history
     *
     * @return \DateTime|null
     */
    public function maxDate()
    {
        $qb=$this->createQueryBuilder('h')->select('h')->orderBy('h.date','DESC')->setMaxResults(1);
        /** @var AbstractHistory $last */
        $last=$qb->getQuery()->getOneOrNullResult();

        if(is_null($last)) {
            return null;
        }

        return $last->getDate();
    }

    /**
     * Count databases
     *
     * @param \DateTime $date
     * @return int
     */
    public function countDatabases(\DateTime $date)
    {
        $qb=$this->createQueryBuilder('h')
            ->select('count(distinct(h.dbName)) AS nb')
            ->where('h.date = :date')
            ->setParameter('date',$date)
            ->groupBy('h.date');

        $row=$qb->getQuery()->getOneOrNullResult();

        if(is_null($row)) {
            return null;
        }

        return $row['nb'];
    }

    /**
     * Count tables
     *
     * @param \DateTime $date
     * @return int
     */
    public function countTables(\DateTime $date)
    {
        $qb=$this->createQueryBuilder('h')
            ->select('count(distinct(h.tableName)) AS nb')
            ->where('h.date = :date')
            ->setParameter('date',$date)
            ->groupBy('h.date');

        $row=$qb->getQuery()->getOneOrNullResult();

        if(is_null($row)) {
            return null;
        }

        return $row['nb'];
    }

    /**
     * Count rows
     *
     * @param \DateTime $date
     * @return int
     */
    public function countRows(\DateTime $date)
    {
        $qb=$this->createQueryBuilder('h')
            ->select('sum(h.nbRows) AS nb')
            ->where('h.date = :date')
            ->setParameter('date',$date)
            ->groupBy('h.date');

        $row=$qb->getQuery()->getOneOrNullResult();

        if(is_null($row)) {
            return null;
        }

        return $row['nb'];
    }

    /**
     * Count data length
     *
     * @param \DateTime $date
     * @return int
     */
    public function countDataLength(\DateTime $date)
    {
        $qb=$this->createQueryBuilder('h')
            ->select('sum(h.dataLength) AS nb')
            ->where('h.date = :date')
            ->setParameter('date',$date)
            ->groupBy('h.date');

        $row=$qb->getQuery()->getOneOrNullResult();

        if(is_null($row)) {
            return null;
        }

        return $row['nb'];
    }

    /**
     * Count index length
     *
     * @param \DateTime $date
     * @return int
     */
    public function countIndexLength(\DateTime $date)
    {
        $qb=$this->createQueryBuilder('h')
            ->select('sum(h.indexLength) AS nb')
            ->where('h.date = :date')
            ->setParameter('date',$date)
            ->groupBy('h.date');

        $row=$qb->getQuery()->getOneOrNullResult();

        if(is_null($row)) {
            return null;
        }

        return $row['nb'];
    }

}
